1. <React.Fragment></React.Fragment> é equivalente a <></>

2. Utilizando o fetch de dados de forma sincrona com async/await (componentDidMount)

3. Importar imagens no React com import 'myImage' from '.myImage.jpg/. Isso é possivel
  graças ao webpack

4. Components de Formulario guardam seu estado. Nao é necessário subir o estado pra um 
componente de nível mais alto (App)

5. Tratando onChange de vários inputs:
  this.setState({
    [e.target.name]: e.target.value
  })

6. Alert desaparecer depois de um tempo:
  chama o setState() pra mostrar o Alert
  depois chama o setState() dentro de um setTimeout de 2s
  dentro do proprio setMessage

7. Testando se a props já vem false, e evitar erro de renderizaçao
  alert !== null && (
      <div className={`alert alert-${alert.type}`}>
        <i className="fas fa-info-circle" /> {alert.message}
      </div>
    )

8. Erro quando tentava renderizar user.name, na primeira chamada de render().
  [NOTE!] NUNCA ATRIBUIR NULL A ALGO QUE IRÁ RENDERIZAR BASEADO NUMA REQUISIÇÃO HTTP
    
    No 1º render() antes do componentDidMount(), o erro era pq nao tinha criado
    a propriedade 'user' no state. Nisso, ele tentava renderizar e dava undefined;
      * A 1º solução foi fazer um render condicional igual ao SearchBar, funcionou;

      * A 2º solução (RECOMENDADA) foi só criar a propriedade 'user' no state, e 'ATRIBUIR UM OBJETO VAZIO A ELA'. Feito isso, a renderização condicional nao é mais necessária

  

9. Ciclo de vida do componente
  1º render() 
  2º componentDidMount()
    * Como geralmente fazemos requisições HTTP nesse método, e chamamos o setState()
    logo o render() será chamado novamente, agora com os dados prontos a serem renderizados.


10. Primeiro contato hook useState

const [text, setText] = useState('') <- valor inicial

setText('someValue') <- writing
text <- reading

11. useEffect hook

  useEffect(() => {
      getUser(match.params.login)
      getUserRepos(match.params.login)
      /* eslint-disable-next-line */ <- anula o warning do array vazio
    }, [])

  com o [] vazio só vai executar uma vez, imitando o componentDidMount

  Se caso eu passasse algo pro array por exemplo. ['user']
  toda vez que 'user' fosse alterado, esse hook iria ser executado

  pra requisições http, é uma boa pratica passar o [], caso contrário temos 
  um loop infinito, de requisição e atualização de dados

  referencias:
    https://overreacted.io/pt-br/a-complete-guide-to-useeffect/
    https://www.robinwieruch.de/react-hooks-fetch-data

   * o Effect Hook executa toda vez que o componente monta ou atualiza

   * Usar função com async dentro da callback do useEffect, 
     Nao passar uma callback com async!

  12. Atualizando varios pedaços do state
    setState:
      this.setState({ users: data, loading: false})

    with hooks:
      setUsers(data)
      setLoading(false)


